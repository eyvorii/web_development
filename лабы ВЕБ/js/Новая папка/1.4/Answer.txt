1.	Для чего нужен объект?

Объекты в JavaScript (JS) являются основным механизмом хранения и организации данных. Они позволяют создавать коллекции данных, которые могут содержать в себе различные типы данных, такие как числа, строки, булевы значения, массивы, другие объекты и функции.
Объекты в JS также используются для создания классов и наследования, что позволяет создавать более сложные структуры данных и функций. Они являются основой для многих встроенных типов данных в JS, таких как массивы, функции и даже строки.
Объекты в JS также используются для работы с DOM (Document Object Model), который представляет собой древовидную структуру HTML-документа. С помощью объектов можно получать доступ к элементам DOM, изменять их свойства и содержимое, добавлять и удалять элементы и т.д.
Кроме того, объекты в JS позволяют создавать и использовать библиотеки и фреймворки, которые могут быть использованы для создания сложных веб-приложений и игр.
Таким образом, объекты в JS являются мощным и универсальным инструментом для работы с данными и создания программного кода.

2.	Какие методы могут быть у объекта?

В JavaScript объекты могут иметь методы, которые являются функциями, связанными с объектом. Методы позволяют объекту выполнять определенные действия и манипулировать своими свойствами. Вот некоторые из наиболее распространенных методов объектов в JavaScript:

1) Методы доступа к свойствам:
- `Object.defineProperty()` - определяет новое свойство или изменяет существующее свойство объекта и возвращает объект.
- `Object.defineProperties()` - определяет новые свойства или изменяет существующие свойства объекта и возвращает объект.

2) Методы манипуляции свойствами:
- `Object.keys()` - возвращает массив имен собственных перечисляемых свойств объекта.
- `Object.values()` - возвращает массив значений собственных перечисляемых свойств объекта.
- `Object.entries()` - возвращает массив пар ключ-значение для собственных перечисляемых свойств объекта.
- `Object.assign()` - копирует значения всех собственных перечисляемых свойств из одного или нескольких исходных объектов в целевой объект и возвращает целевой объект.

3) Методы манипуляции объектами:
- `Object.create()` - создает новый объект с указанным прототипом и свойствами.
- `Object.freeze()` - замораживает объект, что делает его свойства неизменяемыми.
- `Object.seal()` - запечатывает объект, что делает его существующие свойства неизменяемыми, но позволяет добавлять новые свойства.
- `Object.is()` - сравнивает два значения на равенство и возвращает булево значение.

4) Методы преобразования объектов:
- `JSON.stringify()` - преобразует объект в строку JSON.
- `JSON.parse()` - преобразует строку JSON в объект.