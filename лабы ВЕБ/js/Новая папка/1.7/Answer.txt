1.	Есть ли у стрелочной функции метод this?
Да, у стрелочной функции есть метод `this`, но его значение определяется не так, как у обычной функции.

У обычной функции значение `this` зависит от контекста вызова. Например, если вызвать функцию как метод объекта, то `this` будет ссылаться на этот объект. Если же вызвать функцию без контекста, то `this` будет ссылаться на глобальный объект (в браузере это объект `window`).

У стрелочной функции значение `this` определяется лексически, то есть оно наследуется от родительской области видимости. Это означает, что `this` внутри стрелочной функции будет ссылаться на тот же объект, на который ссылается `this` внутри родительской функции или блока кода.

Например, в следующем коде `this` внутри стрелочной функции будет ссылаться на объект `person`, так как родительская функция `greet` вызывается как метод объекта `person`:

const person = {
  name: 'Petr',
  greet: function() {
    const sayHello = () => {
      console.log(`Hello, ${this.name}!`);
    };
    sayHello();
  }
};

person.greet(); // "Hello, Petr!"


Однако, если вызвать `sayHello` без контекста, то `this` будет ссылаться на глобальный объект:

const sayHello = () => {
  console.log(`Hello, ${this.name}!`);
};

sayHello(); // "Hello, undefined!" (в браузере это будет "Hello, window!")


Поэтому, при использовании стрелочных функций необходимо быть осторожным с использованием `this`, чтобы не получить неправильное значение.


2.	Может ли стрелочная функция быть без аргументов?
Да, стрелочная функция может быть без аргументов. В этом случае, при объявлении стрелочной функции, круглые скобки, обычно используемые для указания аргументов, также опускаются.

Например, вот так можно объявить пустую стрелочную функцию:

const sayHello = () => {
  console.log('Hello!');
};

sayHello(); // "Hello!"


В данном случае, функция `sayHello` не принимает никаких аргументов, но при вызове она выводит в консоль сообщение "Hello!".

Если же стрелочная функция не принимает аргументы и не выполняет никаких действий, то ее использование может быть бесполезным. Однако, такие функции могут быть полезны, например, для передачи в качестве аргумента другой функции, которая ожидает функцию в качестве параметра.

3.	Из-за чего появилась стрелочная функция?
Стрелочные функции были добавлены в ECMAScript 6 (ES6) в 2015 году для упрощения синтаксиса и улучшения читаемости кода.

Одной из основных причин появления стрелочных функций было устранение проблемы с `this` в обычных функциях. В обычной функции `this` определяется во время выполнения и зависит от контекста вызова. Это может приводить к трудностям при написании сложных иерархий объектов или при использовании функций в качестве обработчиков событий, где контекст вызова может быть неожиданным.

Стрелочные функции, в отличие от обычных, не имеют собственного `this`, а используют `this` из лексической области видимости, в которой они были объявлены. Это позволяет избежать проблем с `this` и упрощает код.

Кроме того, стрелочные функции имеют более короткий и читаемый синтаксис. Они могут быть написаны в одну строку без использования фигурных скобок и ключевого слова `return`, если они возвращают только одно выражение.

Например, вот как можно написать функцию, которая возвращает квадрат числа, в обычном и стрелочном синтаксисе:

// Обычный синтаксис
function square(x) {
  return x * x;
}

// Стрелочный синтаксис
const square = x => x * x;

Как видно из примера, стрелочная функция имеет более короткий и читаемый синтаксис, что делает код более лаконичным и понятным.